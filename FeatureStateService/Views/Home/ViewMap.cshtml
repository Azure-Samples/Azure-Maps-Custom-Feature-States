@using System.Globalization;
@{
    ViewData["Title"] = "View Map";
}

<div id="alertPlaceholder"></div>
<div id="myMap" style="position:relative;width:100%;min-width:290px;height:600px;"></div>

@section scripts {
    <!--Reference SignalR library. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>

    <!--Reference Azure Maps Map control JavaScript and CSS files. -->
    <link href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/3/atlas.min.css" rel="stylesheet" />
    <script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/3/atlas.min.js"></script>

    <link rel="stylesheet" href="@ViewBag.Domain/sdk/javascript/indoor/0.2/atlas-indoor.min.css" type="text/css" />
    <script src="@ViewBag.Domain/sdk/javascript/indoor/0.2/atlas-indoor.min.js"></script>

    <script>
        var map, indoorManager;
        var featureStates = new Map();
        var featureCollection = new Object();

        // Feature states are visualized by drawing a separate layer.
        const featureStateLayerName = "featureStateLayer";

        // Show an alert on the page.
        function showAlert(message, type) {
            Array.from(document.getElementsByClassName('alert-dismissible')).forEach(alert => alert.remove());

            const alertPlaceholder = $('#alertPlaceholder');
            alertPlaceholder.append(`<div class="alert alert-${type} alert-dismissible" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`);
        }

        async function GetFeatures() {
            var requestOptions = {
                method: 'GET',
                redirect: 'follow'
            };

            const response = await fetch('/api/features', requestOptions)
            return await response.json();
        }

        async function setupMap() {
            featureCollection = await GetFeatures();

            map = new atlas.Map('myMap', {
                zoom: 19,
                view: 'Auto',
                mapConfiguration: '@ViewBag.MapConfigurationId',
                domain: '@ViewBag.Domain',
                styleAPIVersion: '@ViewBag.APIVersion',
                authOptions: {
                    authType: 'anonymous',
                    clientId: '@ViewBag.ClientId',
                    getToken: function (resolve, reject, map) {
                        fetch('@ViewBag.TokenUrl')
                            .then(function (response) {
                                return response.text();
                            })
                            .then(function (token) {
                                resolve(token);
                            })
                            .catch(function (error) {
                                reject(new Error(`Failed to fetch Azure Maps token: ${error.message}`));
                            });
                    }
                }
            });

            // Wait until the map resources are loaded.
            map.events.addOnce('load', function () {
                setupIndoorManager();
                setupClickHandler();
            });
            map.events.addOnce('idle', function () {
                connectToSignalR();
            });
        }

        function setupIndoorManager() {
            indoorManager = new atlas.indoor.IndoorManager(map, {
                levelControl: new atlas.control.LevelControl({
                    position: "top-right",
                })
            });

            indoorManager.setOptions({
                autofocus: true,
                autofocusOptions: {
                    padding: { top: 50, bottom: 50, left: 50, right: 50 }
                }
            });

            map.events.add("levelchanged", indoorManager, (eventData) => {
                console.log("The level has changed:", eventData);
                setupFeatureStateLayer()
            });

            map.events.add("facilitychanged", indoorManager, (eventData) => {
                console.log("The facility has changed:", eventData);
                setupFeatureStateLayer()
            });
        }

        function setupClickHandler() {
            map.events.add("contextmenu", function (e) {
                if (map.layers.getLayerById(featureStateLayerName) == null) {
                    return;
                }

                const features = map.layers
                    .getRenderedShapes(e.position, featureStateLayerName)
                    .filter(feature => indoorManager.getCurrentFacilityDetails().slice(-1).includes(feature.data.properties.levelOrdinal));

                if (!features.length) {
                    return;
                }

                features.forEach(function (feature) {
                    const message = `Right-clicked on feature with name ${feature.data.properties.name}`
                    showAlert(message, 'success')
                });
            });
        }

        function connectToSignalR() {
            function bindConnectionMessage(connection) {
                const onfeatureStateSnapshot = function (message) {
                    console.log('SignalR onfeatureStateSnapshot', message);

                    featureStates = new Map(Object.entries(message))

                    setupFeatureStateLayer();
                };

                const onfeatureStateChange = function (id, featureState) {
                    console.log('SignalR onfeatureStateChange', id, featureState);

                    featureStates.set(id, featureState)

                    const feature = map.sources.getById(featureStateLayerName).getShapeById(id);

                    if (feature != null) {
                        feature.addProperty('featureState', featureState)
                    }
                };

                connection.on('featureStateSnapshot', onfeatureStateSnapshot);
                connection.on('featureStateChange', onfeatureStateChange);
                connection.onclose(onConnectionError);
            }

            function onConnected(connection) {
                console.log('SignalR connection started');
            }

            function onConnectionError(error) {
                if (error && error.message) {
                    console.error(error.message);
                }
            }

            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/featurestates')
                .build();

            bindConnectionMessage(connection);

            connection.start()
                .then(() => onConnected(connection))
                .catch(error => console.error(error.message));
        }

        function setupFeatureStateLayer() {
            if (map.layers.getLayerById(featureStateLayerName) != null) {
                map.layers.remove(featureStateLayerName)
            }

            if (map.sources.getById(featureStateLayerName) != null) {
                map.sources.remove(featureStateLayerName)
            }

            datasource = new atlas.source.DataSource(featureStateLayerName)
            map.sources.add(datasource);

            filteredFeatures = featureCollection.features
                .filter(feature => indoorManager.getCurrentFacilityDetails().slice(-1).includes(feature.properties.levelOrdinal))
                .filter(feature => feature.geometry.type == "Polygon" || feature.geometry.type == "MultiPolygon");

            for (feature of filteredFeatures) {
                feature.properties.featureState = featureStates.get(feature.id) ?? "unknown";
            }

            features = {
                "type": "FeatureCollection",
                "ontology": "custom",
                "features": filteredFeatures
            };

            datasource.add(features);

            map.layers.add([
                new atlas.layer.PolygonLayer(datasource, featureStateLayerName, {
                    fillColor: [
                        'match',
                        ['get', 'featureState'],
        @(Html.Raw(@ViewBag.StyleRules)),
                        "#00000000"
                    ]
                }),
            ]);
        }

        $(document).ready(function () {
            setupMap()
        });

    </script>
}